generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String?
  role         String        @default("artist")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  appointments Appointment[]

  @@map("users")
}

model Customer {
  id                   String            @id @default(uuid())
  name                 String
  email                String?           @unique
  phone                String?
  notes                String?
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @default(now()) @map("updated_at")
  squareId             String?           @unique @map("square_id")
  lastActivityDate     DateTime?         @map("last_activity_date")
  emailUnsubscribed    Boolean           @default(false) @map("email_unsubscribed")
  emailPreferences     Json?             @map("email_preferences")
  appointments         Appointment[]
  checkoutSessions     CheckoutSession[]
  paymentLinks         PaymentLink[]
  payments             Payment[]
  tattooRequests       TattooRequest[]
  emailAutomationLogs  EmailAutomationLog[]

  @@map("customers")
}

model Appointment {
  id              String         @id @default(uuid())
  customerId      String?        @map("customer_id")
  artistId        String?        @map("artist_id")
  date            DateTime?
  duration        Int?
  status          String         @default("pending")
  notes           String?
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @default(now()) @map("updated_at")
  endTime         DateTime?      @map("end_time")
  paymentId       String?        @map("payment_id")
  priceQuote      Float?         @map("price_quote")
  squareId        String?        @unique @map("square_id")
  startTime       DateTime?      @map("start_time")
  tattooRequestId String?        @map("tattoo_request_id")
  type            String?
  contactEmail    String?        @map("contact_email")
  contactPhone    String?        @map("contact_phone")
  artist               User?                @relation(fields: [artistId], references: [id])
  customer             Customer?            @relation(fields: [customerId], references: [id])
  payment              Payment?             @relation(fields: [paymentId], references: [id])
  tattooRequest        TattooRequest?       @relation(fields: [tattooRequestId], references: [id])
  invoices             Invoice[]
  emailAutomationLogs  EmailAutomationLog[]

  @@map("appointments")
}

model TattooRequest {
  id                String        @id @default(uuid())
  customerId        String?       @map("customer_id")
  firstName         String?       @map("first_name")
  description       String
  placement         String?
  size              String?
  colorPreference   String?       @map("color_preference")
  style             String?
  referenceImages   Json          @default("[]") @map("reference_images")
  status            String        @default("new")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @default(now()) @map("updated_at")
  depositAmount     Float?        @map("deposit_amount")
  depositPaid       Boolean       @default(false) @map("deposit_paid")
  finalAmount       Float?        @map("final_amount")
  paymentId         String?       @map("payment_id")
  contactEmail      String?       @map("contact_email")
  contactPhone      String?       @map("contact_phone")
  trackingToken     String?       @unique @map("tracking_token")
  additionalNotes   String?       @map("additional_notes")
  contactPreference String?       @map("contact_preference")
  preferredArtist   String?       @map("preferred_artist")
  purpose           String?
  timeframe         String?
  appointments         Appointment[]
  images               Image[]
  customer             Customer?            @relation(fields: [customerId], references: [id])
  payment              Payment?             @relation(fields: [paymentId], references: [id])
  emailAutomationLogs  EmailAutomationLog[]

  @@map("tattoo_requests")
}

model Payment {
  id             String          @id @default(uuid())
  amount         Float
  status         String          @default("pending")
  paymentMethod  String?         @map("payment_method")
  paymentDetails Json?           @map("payment_details")
  squareId       String?         @unique @map("square_id")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @map("updated_at")
  bookingId      String?         @map("booking_id")
  customerId     String?         @map("customer_id")
  paymentType    String?         @map("payment_type")
  referenceId    String?         @map("reference_id")
  refundDetails  Json?           @map("refund_details")
  appointments   Appointment[]
  invoices       Invoice[]
  customer       Customer?       @relation(fields: [customerId], references: [id])
  tattooRequests TattooRequest[]

  @@index([customerId])
  @@index([status])
  @@index([paymentType])
  @@index([createdAt])
  @@index([referenceId])
  @@map("payments")
}

model Image {
  id              String         @id @default(uuid())
  tattooRequestId String?        @map("tattoo_request_id")
  url             String
  publicId        String         @map("public_id")
  metadata        Json?
  createdAt       DateTime       @default(now()) @map("created_at")
  tattooRequest   TattooRequest? @relation(fields: [tattooRequestId], references: [id])

  @@map("images")
}

model Invoice {
  id            String       @id @default(uuid())
  appointmentId String?      @map("appointment_id")
  paymentId     String?      @map("payment_id")
  amount        Float
  status        String       @default("pending")
  description   String?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @default(now()) @map("updated_at")
  metadata      Json?
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  payment       Payment?     @relation(fields: [paymentId], references: [id])

  @@map("invoices")
}

model PaymentLink {
  id               String    @id @default(uuid())
  squareOrderId    String?   @map("square_order_id")
  customerId       String    @map("customer_id")
  appointmentId    String?   @map("appointment_id")
  amount           Float
  status           String    @default("active")
  url              String
  metadata         Json?
  enableReminders  Boolean   @default(true) @map("enable_reminders")
  lastReminderSent DateTime? @map("last_reminder_sent")
  reminderCount    Int       @default(0) @map("reminder_count")
  reminderSchedule Json      @default("[2, 7, 14]") @map("reminder_schedule")
  expiresAt        DateTime? @map("expires_at")
  deletedAt        DateTime? @map("deleted_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @map("updated_at")
  customer         Customer  @relation(fields: [customerId], references: [id])

  @@index([status, enableReminders, reminderCount])
  @@index([expiresAt])
  @@map("payment_links")
}

model CheckoutSession {
  id            String   @id @default(uuid())
  squareOrderId String   @map("square_order_id")
  customerId    String   @map("customer_id")
  appointmentId String?  @map("appointment_id")
  status        String   @default("pending")
  metadata      Json?
  expiresAt     DateTime @map("expires_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")
  customer      Customer @relation(fields: [customerId], references: [id])

  @@map("checkout_sessions")
}

model AuditLog {
  id           String   @id @default(uuid())
  userId       String?  @map("user_id")
  action       String
  resource     String
  resourceId   String?  @map("resource_id")
  details      Json?
  createdAt    DateTime @default(now()) @map("created_at")
  resourceType String?  @map("resource_type")

  @@map("audit_logs")
}

model BusinessHours {
  id        String   @id @default(uuid())
  dayOfWeek Int      @unique
  openTime  String
  closeTime String
  isOpen    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("business_hours")
}

model SpecialHours {
  id        String   @id @default(uuid())
  date      DateTime @unique @db.Date
  openTime  String?
  closeTime String?
  isClosed  Boolean  @default(false)
  reason    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("special_hours")
}

model EmailTemplate {
  id          String   @id @default(uuid())
  name        String   @unique
  displayName String
  subject     String
  body        String
  htmlBody    String?
  variables   Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  @@map("email_templates")
}

model EmailAutomationLog {
  id                String   @id @default(uuid())
  customerId        String?  @map("customer_id")
  appointmentId     String?  @map("appointment_id")
  tattooRequestId   String?  @map("tattoo_request_id")
  emailType         String   @map("email_type")
  emailAddress      String   @map("email_address")
  templateId        String   @map("template_id")
  sentAt            DateTime @map("sent_at")
  status            String   @default("sent") // sent, failed, bounced
  error             String?
  metadata          Json?
  
  customer          Customer?      @relation(fields: [customerId], references: [id])
  appointment       Appointment?   @relation(fields: [appointmentId], references: [id])
  tattooRequest     TattooRequest? @relation(fields: [tattooRequestId], references: [id])
  
  @@unique([customerId, appointmentId, emailType, sentAt])
  @@index([customerId])
  @@index([appointmentId])
  @@index([emailType])
  @@index([sentAt])
  @@map("email_automation_logs")
}

model EmailAutomationSetting {
  id                String   @id @default(uuid())
  emailType         String   @unique @map("email_type")
  enabled           Boolean  @default(true)
  timingHours       Int?     @map("timing_hours") // Hours before/after event
  timingMinutes     Int?     @map("timing_minutes") // Minutes before/after event
  businessHoursOnly Boolean  @default(true) @map("business_hours_only")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  
  @@map("email_automation_settings")
}
